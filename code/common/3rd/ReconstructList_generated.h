// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RECONSTRUCTLIST_PROTOCOL_H_
#define FLATBUFFERS_GENERATED_RECONSTRUCTLIST_PROTOCOL_H_

#include "flatbuffers/flatbuffers.h"

namespace Protocol {

struct NewBlock;

struct NewBlockAck;

struct NewBlock FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_FILENAME = 4,
    VT_ORDER = 6,
    VT_OFFSET = 8,
    VT_LENGTH = 10,
    VT_MD5 = 12,
    VT_DATA = 14
  };
  const flatbuffers::String *Filename() const {
    return GetPointer<const flatbuffers::String *>(VT_FILENAME);
  }
  int64_t Order() const {
    return GetField<int64_t>(VT_ORDER, 0);
  }
  int64_t Offset() const {
    return GetField<int64_t>(VT_OFFSET, 0);
  }
  uint64_t Length() const {
    return GetField<uint64_t>(VT_LENGTH, 0);
  }
  const flatbuffers::String *Md5() const {
    return GetPointer<const flatbuffers::String *>(VT_MD5);
  }
  const flatbuffers::Vector<uint8_t> *Data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FILENAME) &&
           verifier.Verify(Filename()) &&
           VerifyField<int64_t>(verifier, VT_ORDER) &&
           VerifyField<int64_t>(verifier, VT_OFFSET) &&
           VerifyField<uint64_t>(verifier, VT_LENGTH) &&
           VerifyOffset(verifier, VT_MD5) &&
           verifier.Verify(Md5()) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.Verify(Data()) &&
           verifier.EndTable();
  }
};

struct NewBlockBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Filename(flatbuffers::Offset<flatbuffers::String> Filename) {
    fbb_.AddOffset(NewBlock::VT_FILENAME, Filename);
  }
  void add_Order(int64_t Order) {
    fbb_.AddElement<int64_t>(NewBlock::VT_ORDER, Order, 0);
  }
  void add_Offset(int64_t Offset) {
    fbb_.AddElement<int64_t>(NewBlock::VT_OFFSET, Offset, 0);
  }
  void add_Length(uint64_t Length) {
    fbb_.AddElement<uint64_t>(NewBlock::VT_LENGTH, Length, 0);
  }
  void add_Md5(flatbuffers::Offset<flatbuffers::String> Md5) {
    fbb_.AddOffset(NewBlock::VT_MD5, Md5);
  }
  void add_Data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> Data) {
    fbb_.AddOffset(NewBlock::VT_DATA, Data);
  }
  explicit NewBlockBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  NewBlockBuilder &operator=(const NewBlockBuilder &);
  flatbuffers::Offset<NewBlock> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<NewBlock>(end);
    return o;
  }
};

inline flatbuffers::Offset<NewBlock> CreateNewBlock(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> Filename = 0,
    int64_t Order = 0,
    int64_t Offset = 0,
    uint64_t Length = 0,
    flatbuffers::Offset<flatbuffers::String> Md5 = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> Data = 0) {
  NewBlockBuilder builder_(_fbb);
  builder_.add_Length(Length);
  builder_.add_Offset(Offset);
  builder_.add_Order(Order);
  builder_.add_Data(Data);
  builder_.add_Md5(Md5);
  builder_.add_Filename(Filename);
  return builder_.Finish();
}

inline flatbuffers::Offset<NewBlock> CreateNewBlockDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *Filename = nullptr,
    int64_t Order = 0,
    int64_t Offset = 0,
    uint64_t Length = 0,
    const char *Md5 = nullptr,
    const std::vector<uint8_t> *Data = nullptr) {
  return Protocol::CreateNewBlock(
      _fbb,
      Filename ? _fbb.CreateString(Filename) : 0,
      Order,
      Offset,
      Length,
      Md5 ? _fbb.CreateString(Md5) : 0,
      Data ? _fbb.CreateVector<uint8_t>(*Data) : 0);
}

struct NewBlockAck FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SRCPATH = 4,
    VT_DESPATH = 6,
    VT_SPLITSIZE = 8,
    VT_LENGTH = 10,
    VT_INFOS = 12
  };
  const flatbuffers::String *SrcPath() const {
    return GetPointer<const flatbuffers::String *>(VT_SRCPATH);
  }
  const flatbuffers::String *DesPath() const {
    return GetPointer<const flatbuffers::String *>(VT_DESPATH);
  }
  uint32_t Splitsize() const {
    return GetField<uint32_t>(VT_SPLITSIZE, 0);
  }
  uint64_t Length() const {
    return GetField<uint64_t>(VT_LENGTH, 0);
  }
  const NewBlock *Infos() const {
    return GetPointer<const NewBlock *>(VT_INFOS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SRCPATH) &&
           verifier.Verify(SrcPath()) &&
           VerifyOffset(verifier, VT_DESPATH) &&
           verifier.Verify(DesPath()) &&
           VerifyField<uint32_t>(verifier, VT_SPLITSIZE) &&
           VerifyField<uint64_t>(verifier, VT_LENGTH) &&
           VerifyOffset(verifier, VT_INFOS) &&
           verifier.VerifyTable(Infos()) &&
           verifier.EndTable();
  }
};

struct NewBlockAckBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_SrcPath(flatbuffers::Offset<flatbuffers::String> SrcPath) {
    fbb_.AddOffset(NewBlockAck::VT_SRCPATH, SrcPath);
  }
  void add_DesPath(flatbuffers::Offset<flatbuffers::String> DesPath) {
    fbb_.AddOffset(NewBlockAck::VT_DESPATH, DesPath);
  }
  void add_Splitsize(uint32_t Splitsize) {
    fbb_.AddElement<uint32_t>(NewBlockAck::VT_SPLITSIZE, Splitsize, 0);
  }
  void add_Length(uint64_t Length) {
    fbb_.AddElement<uint64_t>(NewBlockAck::VT_LENGTH, Length, 0);
  }
  void add_Infos(flatbuffers::Offset<NewBlock> Infos) {
    fbb_.AddOffset(NewBlockAck::VT_INFOS, Infos);
  }
  explicit NewBlockAckBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  NewBlockAckBuilder &operator=(const NewBlockAckBuilder &);
  flatbuffers::Offset<NewBlockAck> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<NewBlockAck>(end);
    return o;
  }
};

inline flatbuffers::Offset<NewBlockAck> CreateNewBlockAck(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> SrcPath = 0,
    flatbuffers::Offset<flatbuffers::String> DesPath = 0,
    uint32_t Splitsize = 0,
    uint64_t Length = 0,
    flatbuffers::Offset<NewBlock> Infos = 0) {
  NewBlockAckBuilder builder_(_fbb);
  builder_.add_Length(Length);
  builder_.add_Infos(Infos);
  builder_.add_Splitsize(Splitsize);
  builder_.add_DesPath(DesPath);
  builder_.add_SrcPath(SrcPath);
  return builder_.Finish();
}

inline flatbuffers::Offset<NewBlockAck> CreateNewBlockAckDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *SrcPath = nullptr,
    const char *DesPath = nullptr,
    uint32_t Splitsize = 0,
    uint64_t Length = 0,
    flatbuffers::Offset<NewBlock> Infos = 0) {
  return Protocol::CreateNewBlockAck(
      _fbb,
      SrcPath ? _fbb.CreateString(SrcPath) : 0,
      DesPath ? _fbb.CreateString(DesPath) : 0,
      Splitsize,
      Length,
      Infos);
}

inline const Protocol::NewBlockAck *GetNewBlockAck(const void *buf) {
  return flatbuffers::GetRoot<Protocol::NewBlockAck>(buf);
}

inline const Protocol::NewBlockAck *GetSizePrefixedNewBlockAck(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Protocol::NewBlockAck>(buf);
}

inline bool VerifyNewBlockAckBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Protocol::NewBlockAck>(nullptr);
}

inline bool VerifySizePrefixedNewBlockAckBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Protocol::NewBlockAck>(nullptr);
}

inline void FinishNewBlockAckBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Protocol::NewBlockAck> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedNewBlockAckBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Protocol::NewBlockAck> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Protocol

#endif  // FLATBUFFERS_GENERATED_RECONSTRUCTLIST_PROTOCOL_H_
