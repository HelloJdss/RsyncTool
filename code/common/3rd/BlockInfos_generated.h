// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_BLOCKINFOS_PROTOCOL_H_
#define FLATBUFFERS_GENERATED_BLOCKINFOS_PROTOCOL_H_

#include "flatbuffers/flatbuffers.h"

namespace Protocol {

struct BlockInfo;

struct FileBlockInfos;

struct BlockInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_FILENAME = 4,
    VT_SPLITSIZE = 6,
    VT_ORDER = 8,
    VT_OFFSET = 10,
    VT_LENGTH = 12,
    VT_CHECKSUM = 14,
    VT_MD5 = 16
  };
  const flatbuffers::String *Filename() const {
    return GetPointer<const flatbuffers::String *>(VT_FILENAME);
  }
  uint32_t Splitsize() const {
    return GetField<uint32_t>(VT_SPLITSIZE, 0);
  }
  int64_t Order() const {
    return GetField<int64_t>(VT_ORDER, 0);
  }
  int64_t Offset() const {
    return GetField<int64_t>(VT_OFFSET, 0);
  }
  int64_t Length() const {
    return GetField<int64_t>(VT_LENGTH, 0);
  }
  uint32_t Checksum() const {
    return GetField<uint32_t>(VT_CHECKSUM, 0);
  }
  const flatbuffers::String *Md5() const {
    return GetPointer<const flatbuffers::String *>(VT_MD5);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FILENAME) &&
           verifier.Verify(Filename()) &&
           VerifyField<uint32_t>(verifier, VT_SPLITSIZE) &&
           VerifyField<int64_t>(verifier, VT_ORDER) &&
           VerifyField<int64_t>(verifier, VT_OFFSET) &&
           VerifyField<int64_t>(verifier, VT_LENGTH) &&
           VerifyField<uint32_t>(verifier, VT_CHECKSUM) &&
           VerifyOffset(verifier, VT_MD5) &&
           verifier.Verify(Md5()) &&
           verifier.EndTable();
  }
};

struct BlockInfoBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Filename(flatbuffers::Offset<flatbuffers::String> Filename) {
    fbb_.AddOffset(BlockInfo::VT_FILENAME, Filename);
  }
  void add_Splitsize(uint32_t Splitsize) {
    fbb_.AddElement<uint32_t>(BlockInfo::VT_SPLITSIZE, Splitsize, 0);
  }
  void add_Order(int64_t Order) {
    fbb_.AddElement<int64_t>(BlockInfo::VT_ORDER, Order, 0);
  }
  void add_Offset(int64_t Offset) {
    fbb_.AddElement<int64_t>(BlockInfo::VT_OFFSET, Offset, 0);
  }
  void add_Length(int64_t Length) {
    fbb_.AddElement<int64_t>(BlockInfo::VT_LENGTH, Length, 0);
  }
  void add_Checksum(uint32_t Checksum) {
    fbb_.AddElement<uint32_t>(BlockInfo::VT_CHECKSUM, Checksum, 0);
  }
  void add_Md5(flatbuffers::Offset<flatbuffers::String> Md5) {
    fbb_.AddOffset(BlockInfo::VT_MD5, Md5);
  }
  explicit BlockInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BlockInfoBuilder &operator=(const BlockInfoBuilder &);
  flatbuffers::Offset<BlockInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<BlockInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<BlockInfo> CreateBlockInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> Filename = 0,
    uint32_t Splitsize = 0,
    int64_t Order = 0,
    int64_t Offset = 0,
    int64_t Length = 0,
    uint32_t Checksum = 0,
    flatbuffers::Offset<flatbuffers::String> Md5 = 0) {
  BlockInfoBuilder builder_(_fbb);
  builder_.add_Length(Length);
  builder_.add_Offset(Offset);
  builder_.add_Order(Order);
  builder_.add_Md5(Md5);
  builder_.add_Checksum(Checksum);
  builder_.add_Splitsize(Splitsize);
  builder_.add_Filename(Filename);
  return builder_.Finish();
}

inline flatbuffers::Offset<BlockInfo> CreateBlockInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *Filename = nullptr,
    uint32_t Splitsize = 0,
    int64_t Order = 0,
    int64_t Offset = 0,
    int64_t Length = 0,
    uint32_t Checksum = 0,
    const char *Md5 = nullptr) {
  return Protocol::CreateBlockInfo(
      _fbb,
      Filename ? _fbb.CreateString(Filename) : 0,
      Splitsize,
      Order,
      Offset,
      Length,
      Checksum,
      Md5 ? _fbb.CreateString(Md5) : 0);
}

struct FileBlockInfos FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SRCPATH = 4,
    VT_DESPATH = 6,
    VT_INFOS = 8
  };
  const flatbuffers::String *SrcPath() const {
    return GetPointer<const flatbuffers::String *>(VT_SRCPATH);
  }
  const flatbuffers::String *DesPath() const {
    return GetPointer<const flatbuffers::String *>(VT_DESPATH);
  }
  const flatbuffers::Vector<flatbuffers::Offset<BlockInfo>> *Infos() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<BlockInfo>> *>(VT_INFOS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SRCPATH) &&
           verifier.Verify(SrcPath()) &&
           VerifyOffset(verifier, VT_DESPATH) &&
           verifier.Verify(DesPath()) &&
           VerifyOffset(verifier, VT_INFOS) &&
           verifier.Verify(Infos()) &&
           verifier.VerifyVectorOfTables(Infos()) &&
           verifier.EndTable();
  }
};

struct FileBlockInfosBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_SrcPath(flatbuffers::Offset<flatbuffers::String> SrcPath) {
    fbb_.AddOffset(FileBlockInfos::VT_SRCPATH, SrcPath);
  }
  void add_DesPath(flatbuffers::Offset<flatbuffers::String> DesPath) {
    fbb_.AddOffset(FileBlockInfos::VT_DESPATH, DesPath);
  }
  void add_Infos(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<BlockInfo>>> Infos) {
    fbb_.AddOffset(FileBlockInfos::VT_INFOS, Infos);
  }
  explicit FileBlockInfosBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FileBlockInfosBuilder &operator=(const FileBlockInfosBuilder &);
  flatbuffers::Offset<FileBlockInfos> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FileBlockInfos>(end);
    return o;
  }
};

inline flatbuffers::Offset<FileBlockInfos> CreateFileBlockInfos(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> SrcPath = 0,
    flatbuffers::Offset<flatbuffers::String> DesPath = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<BlockInfo>>> Infos = 0) {
  FileBlockInfosBuilder builder_(_fbb);
  builder_.add_Infos(Infos);
  builder_.add_DesPath(DesPath);
  builder_.add_SrcPath(SrcPath);
  return builder_.Finish();
}

inline flatbuffers::Offset<FileBlockInfos> CreateFileBlockInfosDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *SrcPath = nullptr,
    const char *DesPath = nullptr,
    const std::vector<flatbuffers::Offset<BlockInfo>> *Infos = nullptr) {
  return Protocol::CreateFileBlockInfos(
      _fbb,
      SrcPath ? _fbb.CreateString(SrcPath) : 0,
      DesPath ? _fbb.CreateString(DesPath) : 0,
      Infos ? _fbb.CreateVector<flatbuffers::Offset<BlockInfo>>(*Infos) : 0);
}

inline const Protocol::FileBlockInfos *GetFileBlockInfos(const void *buf) {
  return flatbuffers::GetRoot<Protocol::FileBlockInfos>(buf);
}

inline const Protocol::FileBlockInfos *GetSizePrefixedFileBlockInfos(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Protocol::FileBlockInfos>(buf);
}

inline bool VerifyFileBlockInfosBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Protocol::FileBlockInfos>(nullptr);
}

inline bool VerifySizePrefixedFileBlockInfosBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Protocol::FileBlockInfos>(nullptr);
}

inline void FinishFileBlockInfosBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Protocol::FileBlockInfos> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFileBlockInfosBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Protocol::FileBlockInfos> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Protocol

#endif  // FLATBUFFERS_GENERATED_BLOCKINFOS_PROTOCOL_H_
