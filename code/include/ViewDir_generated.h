// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_VIEWDIR_PROTOCOL_H_
#define FLATBUFFERS_GENERATED_VIEWDIR_PROTOCOL_H_

#include "flatbuffers/flatbuffers.h"

namespace Protocol {

struct ViewDirReq;

struct FileInfo;

struct ViewDirAck;

struct ViewDirReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DESDIR = 4
  };
  const flatbuffers::String *DesDir() const {
    return GetPointer<const flatbuffers::String *>(VT_DESDIR);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DESDIR) &&
           verifier.Verify(DesDir()) &&
           verifier.EndTable();
  }
};

struct ViewDirReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_DesDir(flatbuffers::Offset<flatbuffers::String> DesDir) {
    fbb_.AddOffset(ViewDirReq::VT_DESDIR, DesDir);
  }
  explicit ViewDirReqBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ViewDirReqBuilder &operator=(const ViewDirReqBuilder &);
  flatbuffers::Offset<ViewDirReq> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ViewDirReq>(end);
    return o;
  }
};

inline flatbuffers::Offset<ViewDirReq> CreateViewDirReq(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> DesDir = 0) {
  ViewDirReqBuilder builder_(_fbb);
  builder_.add_DesDir(DesDir);
  return builder_.Finish();
}

inline flatbuffers::Offset<ViewDirReq> CreateViewDirReqDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *DesDir = nullptr) {
  return Protocol::CreateViewDirReq(
      _fbb,
      DesDir ? _fbb.CreateString(DesDir) : 0);
}

struct FileInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_FILEPATH = 4,
    VT_FILESIZE = 6,
    VT_FILEMODIFY = 8
  };
  const flatbuffers::String *FilePath() const {
    return GetPointer<const flatbuffers::String *>(VT_FILEPATH);
  }
  int64_t FileSize() const {
    return GetField<int64_t>(VT_FILESIZE, 0);
  }
  int64_t FileModify() const {
    return GetField<int64_t>(VT_FILEMODIFY, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FILEPATH) &&
           verifier.Verify(FilePath()) &&
           VerifyField<int64_t>(verifier, VT_FILESIZE) &&
           VerifyField<int64_t>(verifier, VT_FILEMODIFY) &&
           verifier.EndTable();
  }
};

struct FileInfoBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_FilePath(flatbuffers::Offset<flatbuffers::String> FilePath) {
    fbb_.AddOffset(FileInfo::VT_FILEPATH, FilePath);
  }
  void add_FileSize(int64_t FileSize) {
    fbb_.AddElement<int64_t>(FileInfo::VT_FILESIZE, FileSize, 0);
  }
  void add_FileModify(int64_t FileModify) {
    fbb_.AddElement<int64_t>(FileInfo::VT_FILEMODIFY, FileModify, 0);
  }
  explicit FileInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FileInfoBuilder &operator=(const FileInfoBuilder &);
  flatbuffers::Offset<FileInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FileInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<FileInfo> CreateFileInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> FilePath = 0,
    int64_t FileSize = 0,
    int64_t FileModify = 0) {
  FileInfoBuilder builder_(_fbb);
  builder_.add_FileModify(FileModify);
  builder_.add_FileSize(FileSize);
  builder_.add_FilePath(FilePath);
  return builder_.Finish();
}

inline flatbuffers::Offset<FileInfo> CreateFileInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *FilePath = nullptr,
    int64_t FileSize = 0,
    int64_t FileModify = 0) {
  return Protocol::CreateFileInfo(
      _fbb,
      FilePath ? _fbb.CreateString(FilePath) : 0,
      FileSize,
      FileModify);
}

struct ViewDirAck FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_FILELIST = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<FileInfo>> *FileList() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<FileInfo>> *>(VT_FILELIST);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FILELIST) &&
           verifier.Verify(FileList()) &&
           verifier.VerifyVectorOfTables(FileList()) &&
           verifier.EndTable();
  }
};

struct ViewDirAckBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_FileList(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FileInfo>>> FileList) {
    fbb_.AddOffset(ViewDirAck::VT_FILELIST, FileList);
  }
  explicit ViewDirAckBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ViewDirAckBuilder &operator=(const ViewDirAckBuilder &);
  flatbuffers::Offset<ViewDirAck> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ViewDirAck>(end);
    return o;
  }
};

inline flatbuffers::Offset<ViewDirAck> CreateViewDirAck(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FileInfo>>> FileList = 0) {
  ViewDirAckBuilder builder_(_fbb);
  builder_.add_FileList(FileList);
  return builder_.Finish();
}

inline flatbuffers::Offset<ViewDirAck> CreateViewDirAckDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<FileInfo>> *FileList = nullptr) {
  return Protocol::CreateViewDirAck(
      _fbb,
      FileList ? _fbb.CreateVector<flatbuffers::Offset<FileInfo>>(*FileList) : 0);
}

}  // namespace Protocol

#endif  // FLATBUFFERS_GENERATED_VIEWDIR_PROTOCOL_H_
